<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	<!-- 
		1、properties: Mybatis 可以使用properties来引入外部properties配置文件的内容
			resource:	引入类路径下的资源
			url:		引入网络路径或者磁盘路径洗的资源
	 -->
	<properties resource="db.properties" />
	
	<!-- 
		2、settings: MyBatis 中settings是极为重要的调整设置，它们会改变 MyBatis 的运行时行为
			setting：	用来设置每一个设置项目
				name：	设置项名
				value：	设置项目取值
	 -->
	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true" />
	</settings>
	
	<!-- 
		3、typeAliases: 别名处理器，可以为 Java 类型设置一个短的名字，别名不区分大小写
	 -->
	<typeAliases>
		<!-- 
			typeAlias: 	为某个java类型起别名
				type:	指定要起别名的类型全限定名；默认比尔名就是类名小写: employee
		 -->
		<!-- <typeAlias alias="emp" type="com.atguigu.mybatis.bean.Employee" /> -->
		<!-- 
			package：	为某个包下的所有类批量起别名
				name:	指定包名(当前包以及下面所有的后代包的每一个类都起一个默认别名(类名小写))
		 -->
		<package name="cn.colg.entity" />
		
		<!-- 批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->
	</typeAliases>
	
	<!-- 
		4、environments:	配置环境，Mybatis可以配置多种环境，default指定使用某种环境，可以达到快速切换
			environment:			配置一个具体的环境信息，必须包含两个标签，id代表当前环境的唯一标识
				transactionManager:	事务管理器
						type:		事务类型：JDBC(JdbcTransactionFactory) | MANAGED(ManagedTransactionFactory)
									自定义事务管理器：实现TransactionFactory接口，type指定为全类名
				dataSource:			数据源
						type:		有三种内建的数据源类型（也就是 type=”[UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)|JNDI(JndiDataSourceFactory)]”）
						自定义数据源:	实现DataSourceFactory接口，type是全类名
	 -->

	<environments default="development">
		<environment id="test">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>

		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>
	
	<!-- 
		5、databaseIdProvider： MyBatis 可以根据不同的数据库厂商执行不同的语句，这种多厂商的支持是基于映射语句中的 databaseId 属性。
	 -->
	
	<!-- 将写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件中 -->
	<!-- 
		6、mappers: 将sql映射注册到全局配置中
	 -->
	<mappers>
		<!-- 
			mapper: 注册一个sql映射
				注册配置文件：
					resource：	引用类路径下的sql映射文件				<mapper resource="org/mybatis/builder/PostMapper.xml"/>
					url：		引用网络路径下或者磁盘路径下的sql映射文件	<mapper url="file:///var/mappers/PostMapper.xml"/>
				注册接口：
				class:		引用（注册）接口
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上
					推荐：比较重要的，复杂的Dao接口写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		 -->
		<!-- <mapper resource="mybatis/mapper/EmployeeMapper.xml" /> -->
		<!-- <mapper class="com.atguigu.mybatis.dao.EmployeeMapperAnnotation"/> -->
		
		<!-- package：	批量注册：同包名、同命名 -->
		<package name="cn.colg.dao" />
	</mappers>

</configuration>