<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.colg.dao.EmployeeMapper">

	<select id="queryByLastNameResultMap" resultType="cn.colg.entity.Employee">
		SELECT tl.id, tl.last_name lastName, tl.gender, tl.email
		FROM tbl_employee tl
		WHERE tl.last_name LIKE '%${lastName}%'
	</select>
	
	<select id="findByIdResultMap" resultType="map">
		SELECT tl.id, tl.last_name lastName, tl.gender, tl.email
		FROM tbl_employee tl
		WHERE tl.id = #{id}
	</select>

	<!-- resultType: 如果返回的是一个集合，要写集合中元素的类型 -->
	<select id="queryByLastName" resultType="cn.colg.entity.Employee">
		SELECT tl.id, tl.last_name lastName, tl.gender, tl.email
		FROM tbl_employee tl
		WHERE tl.last_name LIKE '%${lastName}%'
	</select>
	
	<select id="findByMap" resultType="cn.colg.entity.Employee">
		SELECT tl.id, tl.last_name lastName, tl.gender, tl.email
		FROM ${map.tableName} tl
		WHERE tl.id = #{map.id} AND tl.last_name LIKE '${map.lastName}'
	</select>
	
	<select id="findByIdAndLastName" resultType="cn.colg.entity.Employee">
		SELECT tl.id, tl.last_name lastName, tl.gender, tl.email
		FROM tbl_employee tl
		WHERE tl.id = #{id} AND tl.last_name LIKE '%${lastName}%'
	</select>
	
	<select id="findById" resultType="cn.colg.entity.Employee">
		SELECT tl.id, tl.last_name lastName, tl.gender, tl.email
		FROM tbl_employee tl
		WHERE tl.id = #{id}
	</select>
	
	<select id="findLastNameById" resultType="string">
		SELECT tl.last_name lastName
		FROM tbl_employee tl
		WHERE tl.id = #{id}
	</select>
	
	<!-- 
		parameterType：参数类型，可以省略
		
		获取自增主键的值：
			Mysql支持自增主键，自增主键值的获取，Mybatis也是利用statement.getGenreatedKeys();
			useGeneratedKeys="true"	使用自增主键获取主键值策略
			keyProperty				指定对应的主键属性，也就是Mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	 -->
	<insert id="addEmployee" useGeneratedKeys="true" keyProperty="employee.id">
		INSERT INTO tbl_employee (last_name, email, gender)
		VALUES (#{employee.lastName}, #{employee.email}, #{employee.gender})
	</insert>
	
	<update id="updateEmployee">
		UPDATE tbl_employee
		SET last_name = #{employee.lastName}, email = #{employee.email}, gender = #{employee.gender}
		WHERE id = #{employee.id}
	</update>
	
	<delete id="deleteById">
		DELETE FROM tbl_employee WHERE id = #{id}
	</delete>
</mapper>